const N=2     //maximum #golf balls
range B=0..N  //available range

ALLOCATOR  = BALL[N],
BALL[b:B]  = (when (b>0) get[i:1..b] -> BALL[b-i]
             |put[j:1..N]            -> BALL[b+j]
             ).

range R=1..N  //request range

PLAYER      = (need[b:R]->PLAYER[b]),
PLAYER[b:R] = (get[b]->put[b]->PLAYER[b]).


const N = 5
range Int = 0.. N
SEMAPHORE( I =0) = SEMA [I ] ,
SEMA [v: Int ] = ( when (v <N) up -> SEMA [ v +1]
| when (v >0) down -> SEMA [v -1]
).
BUFFER = ( put -> BUFFER | get -> BUFFER ).
PRODUCER = ( empty . down -> put -> full . up -> PRODUCER ).
CONSUMER = ( full . down -> get -> empty . up -> CONSUMER ).

|| BOUNDEDBUFFER = ( PRODUCER || BUFFER || CONSUMER
|| empty : SEMAPHORE(N)
|| full : SEMAPHORE (0)
).
------------------------------------------------
ELEMENT  
  = (wait -> BLOCKED | unblockAll -> ELEMENT),
BLOCKED  
  = ({unblock,unblockAll} -> UNBLOCK),
UNBLOCK  
  = (endwait -> ELEMENT).
minimal
CONTROL = EMPTY,
EMPTY   = (wait -> WAIT[1] 
          |{notifyAll,notify} -> EMPTY
          ),
WAIT[i:1..Nthread] 
        = (when (i<Nthread) wait -> WAIT[i+1]
          |notifyAll -> unblockAll -> EMPTY
          |notify -> unblock -> 
           if (i==1) then EMPTY else WAIT[i-1]
          ).

set SyncOps = {notify,notifyAll,wait}

||WAITSET 
      = (Threads:ELEMENT || Threads::CONTROL)
        /{unblockAll/Threads.unblockAll}.



PRODUCER = (shipArriveArrivalZone -> PRODUCER).
CONSUMER = (shipDepartDepartureZone -> CONSUMER).
BERTH = (shipGetIntoBerth -> shipLeaveBerth).
OPERATOR = (shieldActicate -> shieldDeactivate -> OPERATOR).

WAITZONE(N=SizeOfWaitZone) = WAITZONE[0],
	WAITZONE[i:0..N] = ( when (i<N)  shipArrive -> WAITZONE[i+1] 
					   | when (i>0)  shipDepart -> WAITZONE[i-1]

).

//Constant Parameters
const NumOfTugs = 5
const NumOfPilot = 2
const SizeOfBerth = 1
const SizeOfWaitZone = 1
const DockingTugs = 3
const UndockingTugs = 2

const SizeOfSem = 1

range SemRange = 0..SizeOfSem
range TugsRange = 0..NumOfTugs
range PilotRange = 1..NumOfPilot

set SHIPACTIONS = {shipArrive, shipDepart}
//Data Structures
//1 represents available, 0 represents occupied 
BINARY_SEMAPHORE = SEM[1],
SEM[i:0..1] = (when (i == 1) acquire -> SEM[i-1]
			  |when (i == 0) release -> SEM[i+1]
).

//Processes
PRODUCER = (shipArriveArrivalZone -> PRODUCER).
CONSUMER = (shipDepartDepartureZone -> CONSUMER).
BERTH = (shipGetIntoBerth -> shipLeaveBerth).
OPERATOR = (shieldActicate -> shieldDeactivate -> OPERATOR).
 
//PILOT = (arrivalZone.check[i:0..SizeOfWaitZone] -> 
//			(when (i>0) acquireShip -> tugs.dockAcquire -> tugs.dockRelease ->
//		 	tugs.undockAcquire -> tugs.undockRelease -> departureZone.check[j:0..SizeOfWaitZone] ->
//				(when (j < SizeOfWaitZone) releaseShip -> PILOT))
//).
PILOT = (az.shipDepart//shipDepartsArrivalZone 
			-> acquireShip -> tugs.dockAcquire -> tugs.dockRelease ->
		 	tugs.undockAcquire -> tugs.undockRelease -> dz.shipDepart->
			releaseShip -> PILOT
).

TUGS(N=0) = TUGS[N],
	TUGS[i:0..N] = (when (i > DockingTugs) dockAcquire -> TUGS[i - DockingTugs]
					   |when (i > UndockingTugs) undockAcquire -> TUGS[i - UndockingTugs]
					   |dockRelease -> TUGS[i + DockingTugs]      
					   |undockRelease -> TUGS[i + UndockingTugs]
).
//SHIPS = (arriveArrivalZone -> travel -> dock -> unload -> undock -> 
//		travel -> arriveDepartureZone -> depart -> SHIPS).
WAITZONE(N=SizeOfWaitZone) = WAITZONE[0],
	WAITZONE[i:0..N] = ( when (i<N)  shipArrive -> WAITZONE[i+1] 
					   | when (i>0)  shipDepart -> WAITZONE[i-1]

).

//AZ = ()

//Composite Processes
//||ARRIVALZONE = (WAITZONE||PRODUCER).//{shipLeave/shipDepart}.
					
//||DEPARTUREZONE = (WAITZONE/{shipArrivesDepartureZone / shipArrive, shipDepartsDepartureZone / shipDepart}||CONSUMER).//{shipArrive}.

||PILOTALLOCATOR = (
		(p[i:PilotRange]:PILOT)||az:WAITZONE||dz:WAITZONE
		||{p[i:PilotRange]}::tugs:TUGS(NumOfTugs)
				//||{p[i:PilotRange]}::DEPARTUREZONE||{p[i:PilotRange]}::ARRIVALZONE
).


//||SPACESYS = (ARRIVALZONE || DEPARTUREZONE || PILOTALLOCATOR).








