<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Fsp on Yzzhan Tech Repo</title>
    <link>https://yangzhanghavefun.github.io/yzzhan/tags/fsp/</link>
    <description>Recent content in Fsp on Yzzhan Tech Repo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>© This post is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License，please give source if you wish to quote or reproduce.</copyright>
    
	<atom:link href="https://yangzhanghavefun.github.io/yzzhan/tags/fsp/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Modelling Complex System(SWEN90005)</title>
      <link>https://yangzhanghavefun.github.io/yzzhan/post/swen90005/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yangzhanghavefun.github.io/yzzhan/post/swen90005/</guid>
      <description>Concurrency Concurrent programming needs to handle two types of difficulties.
 Communication: Process generally need to communicate with each other, either by accessing shared data, or by message passing. Synchronization: Process may need to synchronize certain events, such as &amp;ldquo;P must not reach point P until after Q has reached point Q&amp;rdquo;.  Here are two solutions to solve the difficulites.
 Shared memory: utilising the concept of monitor. Message Passing: based on Hoare&amp;rsquo;s idea of Communication Sequential Processes(CSP)  Shared Memorry &amp;mdash; Java The processors go wrong because each falsely assumes to have exclusive access to memorry in its read-change-write cycle.</description>
    </item>
    
  </channel>
</rss>