<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Concurrency on Yzzhan Tech Repo</title>
    <link>https://yangzhanghavefun.github.io/yzzhan/tags/concurrency/</link>
    <description>Recent content in Concurrency on Yzzhan Tech Repo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>© This post is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License，please give source if you wish to quote or reproduce.</copyright>
    <lastBuildDate>Tue, 04 Jun 2019 01:37:56 +0800</lastBuildDate>
    
	<atom:link href="https://yangzhanghavefun.github.io/yzzhan/tags/concurrency/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>深入理解java并发知识的归纳</title>
      <link>https://yangzhanghavefun.github.io/yzzhan/post/javaconcurrency/</link>
      <pubDate>Tue, 04 Jun 2019 01:37:56 +0800</pubDate>
      
      <guid>https://yangzhanghavefun.github.io/yzzhan/post/javaconcurrency/</guid>
      <description>1. 多线程基础  1.1. 多线程的三个问题 1.2. Java内存模型 1.3. 如果解决并发原子性问题&amp;mdash;互斥锁 1.4. &amp;ldquo;等待-通知&amp;rdquo;机制 1.5. 编程中需要注意的三类问题: 安全性问题, 活跃性问题和性能问题. 1.6. 管程 1.7. 线程 1.8. 并发量 1.9. 局部变量 &amp;ndash; 线程封闭  2. Java.util.Concurrent JUC并发包详解  2.1. Lock接口 2.2. Condition接口 2.3. 信号量模型 2.4. ReadWriteLock 实现 2.5. StampedLock 2.6. CountDownLatch和CyclicBarrier 2.7. 并发容器 2.8. 原子类 2.9. 线程池Executor 2.10. Future 2.11. CompletableFuture 2.12. CompletionService: 批量异步化操作 2.13. Fork/Join 分治模型  并发设计模式  Immutability模式 Copy-on-Write模式 线程本地存储模式 Guarded Suspension模式 Balking模式 Thread-Per-Message模式 Worker Thread模式 两阶段终止模式 生产者消费者模式  实际并发框架的简要分析  Guava RateLimiter 高性能限流器 Netty 高性能网络应用框架 Disruptor 高性能队列 HiKariCP 高性能数据库连接池   1.</description>
    </item>
    
    <item>
      <title>解析J.U.C源码</title>
      <link>https://yangzhanghavefun.github.io/yzzhan/post/juc_source/</link>
      <pubDate>Sun, 02 Jun 2019 01:37:56 +0800</pubDate>
      
      <guid>https://yangzhanghavefun.github.io/yzzhan/post/juc_source/</guid>
      <description> Atomic Classes Atomic包的实现主要依赖硬件原子指令CAS的支持.例如在getAndIncrement()方法中调用了unsafe.getAndAddInt()方法. 其中调用了native的compareAndSwapInt方法.
//例如要在并发环境中对count这个对象执行加一的操作,count原有指为5.  public final int getAndAddInt(Object var1, long var2, int var4) { //var1 指被操作的对象, var2指被操作对象的偏移量, var4值要加的值  //对应例子var1=count, var2=5, var4=1  int var5; do { //通过对象和offset得到内存中这个对象真正的值.  var5 = this.getIntVolatile(var1, var2); } while(!this.compareAndSwapInt(var1, var2, var5, var5 + var4)); 当内存中的值等于对应的偏移量(输入的值)时,执行值的交换操作. return var5; }</description>
    </item>
    
    <item>
      <title>Notes for Advanced Database System(COMP90050)</title>
      <link>https://yangzhanghavefun.github.io/yzzhan/post/adb/</link>
      <pubDate>Wed, 17 Apr 2019 01:37:56 +0800</pubDate>
      
      <guid>https://yangzhanghavefun.github.io/yzzhan/post/adb/</guid>
      <description>Database Architecture Database technologies:
 Simple file systems linke Unix file system Relational database systems Object Oriented Systems Deductive Database System Key-Value pair based Database System NoSQL  Database architectures:
 Centralised Database systems Client-Server Distributed Database systems World Wide Web Grid Computing/Database &amp;amp; Cloud Computing/Data Centres  Hardware Structure Memory Hierarchy The design and chip and cache is relatively similar. Cache design aims to catch several stage of</description>
    </item>
    
    <item>
      <title>对操作系统中并发的读书总结</title>
      <link>https://yangzhanghavefun.github.io/yzzhan/post/concurrencyinoperatingsystem/</link>
      <pubDate>Wed, 17 Apr 2019 01:37:56 +0800</pubDate>
      
      <guid>https://yangzhanghavefun.github.io/yzzhan/post/concurrencyinoperatingsystem/</guid>
      <description> 这篇文章是对&amp;lt;&amp;gt;关于进程,线程等并发相关的知识点的总结. 以下内容分为四个部分, 进程的描述和控制, 线程, 并发性, 并发中的死锁和饥饿.
进程的描述和控制 线程 并发性 并发中的死锁和饥饿 </description>
    </item>
    
  </channel>
</rss>