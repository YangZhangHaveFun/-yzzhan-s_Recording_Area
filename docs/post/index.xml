<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Yzzhan Tech Repo</title>
    <link>https://yangzhanghavefun.github.io/yzzhan/post/</link>
    <description>Recent content in Posts on Yzzhan Tech Repo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>© This post is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License，please give source if you wish to quote or reproduce.</copyright>
    <lastBuildDate>Thu, 05 Sep 2019 01:37:56 +0800</lastBuildDate>
    
	<atom:link href="https://yangzhanghavefun.github.io/yzzhan/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Java面试记录</title>
      <link>https://yangzhanghavefun.github.io/yzzhan/post/interviewrecord/</link>
      <pubDate>Thu, 05 Sep 2019 01:37:56 +0800</pubDate>
      
      <guid>https://yangzhanghavefun.github.io/yzzhan/post/interviewrecord/</guid>
      <description> 阿里一面 </description>
    </item>
    
    <item>
      <title>对算法笔试题的总结</title>
      <link>https://yangzhanghavefun.github.io/yzzhan/post/alg/</link>
      <pubDate>Thu, 29 Aug 2019 01:37:56 +0800</pubDate>
      
      <guid>https://yangzhanghavefun.github.io/yzzhan/post/alg/</guid>
      <description>算法笔试目前看来更多的是通过题目抽象出具体算法要求, 然后根据经验写出计算过程. 因此, 总结一些经典的方法和做过的题目还是很有必要的. 这篇博客用来拾遗用, 把做过的东西都捋一捋.
数组问题(Array Related) 对撞指针 滑动窗口 寻找和为定值的多个数 字符串问题(String Related) 子串问题 子串问题最常见的有求最长子串, 最短子串等问题, 与sequence不同, 子串的特点是连续性, 所以最优解一定是遍历一次字符串后就可以得到答案, 复杂度应为O(n). 例如76. Minimum Window Substring(string s 中包含string t的最小子串)
string minWindow(string s, string t) { vector&amp;lt;int&amp;gt; map(128,0); for(auto c: t) map[c]++; int counter=t.size(), begin=0, end=0, d=INT_MAX, head=0; while(end&amp;lt;s.size()){ if(map[s[end++]]--&amp;gt;0) counter--; //in t  while(counter==0){ //valid  if(end-begin&amp;lt;d) d=end-(head=begin); if(map[s[begin++]]++==0) counter++; //make it invalid  } } return d==INT_MAX? &amp;#34;&amp;#34;:s.substr(head, d); } 思路为构建一个128长度的数组(ASCII)来记录出现的次数.</description>
    </item>
    
    <item>
      <title>Spring Analysis</title>
      <link>https://yangzhanghavefun.github.io/yzzhan/post/springframework/</link>
      <pubDate>Mon, 29 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://yangzhanghavefun.github.io/yzzhan/post/springframework/</guid>
      <description>JDBC的简单操作  JdbcTemplate  query queryForObject queryForList update execute   ####事务抽象的核心接口 - PlatformTransactionManager - DataSourceTransactionManager - HibernateTransactionManager - JtaTransactionManger - TransactionDefition - Propagation - Isolation - Timeout - Read-only status</description>
    </item>
    
    <item>
      <title>深入理解java并发知识的归纳</title>
      <link>https://yangzhanghavefun.github.io/yzzhan/post/javaconcurrency/</link>
      <pubDate>Tue, 04 Jun 2019 01:37:56 +0800</pubDate>
      
      <guid>https://yangzhanghavefun.github.io/yzzhan/post/javaconcurrency/</guid>
      <description>1. 多线程基础  1.1. 多线程的三个问题 1.2. Java内存模型 1.3. 如果解决并发原子性问题&amp;mdash;互斥锁 1.4. &amp;ldquo;等待-通知&amp;rdquo;机制 1.5. 编程中需要注意的三类问题: 安全性问题, 活跃性问题和性能问题. 1.6. 管程 1.7. 线程 1.8. 并发量 1.9. 局部变量 &amp;ndash; 线程封闭  2. Java.util.Concurrent JUC并发包详解  2.1. Lock接口 2.2. Condition接口 2.3. 信号量模型 2.4. ReadWriteLock 实现 2.5. StampedLock 2.6. CountDownLatch和CyclicBarrier 2.7. 并发容器 2.8. 原子类 2.9. 线程池Executor 2.10. Future 2.11. CompletableFuture 2.12. CompletionService: 批量异步化操作 2.13. Fork/Join 分治模型  并发设计模式  Immutability模式 Copy-on-Write模式 线程本地存储模式 Guarded Suspension模式 Balking模式 Thread-Per-Message模式 Worker Thread模式 两阶段终止模式 生产者消费者模式  实际并发框架的简要分析  Guava RateLimiter 高性能限流器 Netty 高性能网络应用框架 Disruptor 高性能队列 HiKariCP 高性能数据库连接池   1.</description>
    </item>
    
    <item>
      <title>深入理解java网络开发知识的归纳</title>
      <link>https://yangzhanghavefun.github.io/yzzhan/post/javawebknowledge/</link>
      <pubDate>Tue, 04 Jun 2019 01:37:56 +0800</pubDate>
      
      <guid>https://yangzhanghavefun.github.io/yzzhan/post/javawebknowledge/</guid>
      <description>计算机网络 OSI 七层模型  应用层(Application Layer): 文件传输, 电子邮件, 文件服务, 虚拟终端 表示层(Presentation Layer): 信息的语法语义以及它们的关联, 如加密解密, 转化翻译, 压缩解压缩. 会话层(Session Layer): 不同机器上的用户之间建立及管理会话 传输层(Transport Layer): 接受上一层的数据, 在必要的时候把数据进行分割, 并将这些数据交给网络层, 且保证这些数据段有效到达对端 网络层(Network Layer): 控制子网的运行, 如逻辑编址, 分组传输, 路由选择 数据链路层(Linked Layer): 物理寻址, 同时将原始比特流转变为逻辑传输线路 物理层(Physical Layer): 机械,电子,定时接口通信信道上的原始比特流传输.  TCP相关 IP协议是无连接的通信协议,他不会占用正在通信的两个计算机的通信线路, IP极大降低了对网络线路的需求. IP的作用仅仅是将每个包路由至他的目的地. 它没有机制去检查或保证数据包的顺序性和准确性.
TCP(Transmission Control Protocol) 传输控制协议简介
 面向连接的,可靠的,基于字节流的传输层通信协议 将应用层的数据流分割成报文段并发送给目标节点的TCP层. 数据包都有序号,对方收到则发送ACK确认,未收到则重传.使用校验和来检验数据在传输过程中是否有误.   两台电脑的两个进程能互相通信的最基本的要求是能唯一表示一个进程, 通过这个唯一标识可以找到对应的线程. 我们可以在传输层中使用协议端口号, IP可以唯一标识一个主机, TCP协议和端口号可以唯一标识一个进程. IP+TCP+PORT这种唯一标识的模式也被称为套接字(socket). 也就是说我们只需要把数据传送到某一个合适的端口, 剩下的过程由TCP来负责
 socket通信题 TCP Flags  URG: 紧急指针标志 ACK: 确认序号标志 PSH: push标志 RST: 重置连接标志 SYN: 同步序号, 用于建立连接的过程 FIN: finish标志, 用于释放连接  三次握手过程  第一次握手: 建立连接时, 客户端发送SYN包(seq=x)到服务器, 并进入SYN_SEND状态, 等待服务器确认.</description>
    </item>
    
    <item>
      <title>解析J.U.C源码</title>
      <link>https://yangzhanghavefun.github.io/yzzhan/post/juc_source/</link>
      <pubDate>Sun, 02 Jun 2019 01:37:56 +0800</pubDate>
      
      <guid>https://yangzhanghavefun.github.io/yzzhan/post/juc_source/</guid>
      <description>Atomic Classes Atomic包的实现主要依赖硬件原子指令CAS的支持.例如在getAndIncrement()方法中调用了unsafe.getAndAddInt()方法. 其中调用了native的compareAndSwapInt方法.
//例如要在并发环境中对count这个对象执行加一的操作,count原有指为5.  public final int getAndAddInt(Object var1, long var2, int var4) { //var1 指被操作的对象, var2指被操作对象的偏移量, var4值要加的值  //对应例子var1=count, var2=5, var4=1  int var5; do { //通过对象和offset得到内存中这个对象真正的值.  var5 = this.getIntVolatile(var1, var2); } while(!this.compareAndSwapInt(var1, var2, var5, var5 + var4)); 当内存中的值等于对应的偏移量(输入的值)时,执行值的交换操作. return var5; } 队列同步器AQS(AbstractQueuedSynchronizer) AQS是用来构建锁或其他同步组件的基本框架, 其中成员变量有两个
 int型表示同步状态: 果我们使用锁同步共享变量的时候，我们首先应该要知道这个共享变量的状态（是否已经被其他线程锁住等），这也是这个int成员变量的作用； 内置的FIFO队列: 第二个就是既然是同步访问共享资源，肯定会有一些线程无法获取到共享资源等待获取锁而进入一个容器中进行保存而这容器就是这个内置的FIFO队列。  子类推荐被定义为自定义同步组件的静态内部类，同步器自身没有实现任何同步接口，它仅仅是定义了若干同步状态获取和释放的方法来供自定义同步组件使用，同步器既可以支持独占式地获取同步状态，也可以支持共享式地获取同步状态，这样就可以方便实现不同类型的同步组（ ReentrantLock、ReentrantReadWriteLock、CountDownLatch 等）。 同步器是实现锁（也可以是任意同步组件）的关键，在锁的实现中聚合同步器，利用同步器实现锁的语义。可以这样理解二者之间的关系：
 锁是面向使用者的，它定义了使用者与锁交互的接口（比如可以允许两个线程并行访问），隐藏了实现细节； 同步器面向的是锁的实现者，它简化了锁的实现方式，屏蔽了同步状态管理、线程的排队、等待与唤醒等底层操作。或者可以把AQS认为是锁的实现者的一个父类。  AQS的主要方法 按照可见性和继承性可分成四类:
 public final protected final private protected  protected /** * Attempts to acquire in exclusive mode.</description>
    </item>
    
    <item>
      <title>杂记</title>
      <link>https://yangzhanghavefun.github.io/yzzhan/post/zaji/</link>
      <pubDate>Fri, 17 May 2019 01:37:56 +0800</pubDate>
      
      <guid>https://yangzhanghavefun.github.io/yzzhan/post/zaji/</guid>
      <description>老子曰: 死而不亡者寿. &amp;ldquo;&amp;lsquo;太上有立德，其次有立功，其次有立言&amp;rsquo;，虽久不废，此之谓不朽。&amp;rdquo; &amp;mdash;&amp;lt;&amp;lt;左传&amp;gt;&amp;gt;
为君纠错, 是为忠; 为家擎天, 是为孝; 为子作则, 是为礼; 为法辩白, 是为节.
&amp;ldquo;为天地立心，为生民立命，为往圣继绝学，为万世开太平” &amp;ndash; 张载
《我的心曾悲伤七次》
&amp;mdash;-卡里·纪伯伦 Kahlil Gibran
第一次，当它本可进取时，却故作谦卑；
第二次，当它在空虚时，用爱欲来填充；
第三次，在困难和容易之间，它选择了容易；
第四次，它犯了错，却借由别人也会犯错来宽慰自己；
第五次，它自由软弱，却把它认为是生命的坚韧；
第六次，当它鄙夷一张丑恶的嘴脸时，却不知那正是自己面具中的一副；
第七次，它侧身于生活的污泥中，虽不甘心，却又畏首畏尾。
Kahlil Gibran，1883—1931
The first time when I saw her being meek that she might attain height. The second time when I saw her limping before the crippled. The third time when she was given to choose between the hard and the easy, and she chose the easy.</description>
    </item>
    
    <item>
      <title>对深入理解java虚拟机的读书总结</title>
      <link>https://yangzhanghavefun.github.io/yzzhan/post/jvm/</link>
      <pubDate>Mon, 13 May 2019 01:37:56 +0800</pubDate>
      
      <guid>https://yangzhanghavefun.github.io/yzzhan/post/jvm/</guid>
      <description>这篇文章是关于/&amp;lt;&amp;lt;深入理解Java虚拟机第二版&amp;gt;&amp;gt;的全书总结.总结的目录也与原书的章节吻合.
Part 1(Java 概括) Java技术体系的组成部分 - Java 程序设计语言 - 各种硬件平台上的Java虚拟机 - Class文件格式 - Java API 类库 - 来自商业机构和开源社区的第三方Java类库
JDK(Java Development Kit) 包括Java 程序设计语言, Java虚拟机, JavaAPI类库这三部分。是用于支持Java程序开发的最小环境
JRE(Java Runtime Environment) 包括Java SE API子集和Java虚拟机这两个部分。是支持Java程序运行的标准环境。
Java的四个平台 - Java Card: 支持一些Java小程序(Applets) 运行在小内存设备（如智能卡）上的平台 - Java ME(Micro Edition): 支持Java程序运行在移动终端上的平台，是对Java API有所精简并加入了针对移动终端支持，以前称为J2ME。 - Java SE（Standard Edition）: 支持面向桌面级应用。 - Java EE (Enterprise Edition) : 支持使用多层架构的企业应用的Java平台，除了提供Java SE API外，还对其做了大量的扩充和部署支持。
Part 2（自动内存管理机制） Java内存区域与内存溢出异常 运行时的数据区域 Java虚拟机在执行Java程序的过程中会把所管理的内存划分为若干个不同的数据区域. 1. 程序计数器(Program Counter Register) * 当前线程所执行的字节码的行号指示器 * 字节码解释器工作时通过程序计数器来选取下一条需要执行的字节码指令.</description>
    </item>
    
    <item>
      <title>hadoop的归纳</title>
      <link>https://yangzhanghavefun.github.io/yzzhan/post/hadoop/</link>
      <pubDate>Fri, 03 May 2019 01:37:56 +0800</pubDate>
      
      <guid>https://yangzhanghavefun.github.io/yzzhan/post/hadoop/</guid>
      <description>Concepts of Hadoop &amp;ldquo;an open source softeware platform for distributed storage and distributed processing of very large data sets on computer clusters built from commodity hardware&amp;rdquo; - Hortonworks</description>
    </item>
    
    <item>
      <title>Notes for Advanced Database System(COMP90050)</title>
      <link>https://yangzhanghavefun.github.io/yzzhan/post/adb/</link>
      <pubDate>Wed, 17 Apr 2019 01:37:56 +0800</pubDate>
      
      <guid>https://yangzhanghavefun.github.io/yzzhan/post/adb/</guid>
      <description>Database Architecture Database technologies:
 Simple file systems linke Unix file system Relational database systems Object Oriented Systems Deductive Database System Key-Value pair based Database System NoSQL  Database architectures:
 Centralised Database systems Client-Server Distributed Database systems World Wide Web Grid Computing/Database &amp;amp; Cloud Computing/Data Centres  Hardware Structure Memory Hierarchy The design and chip and cache is relatively similar. Cache design aims to catch several stage of</description>
    </item>
    
    <item>
      <title>Notes for Cluster and Cloud Computing(COMP90024)</title>
      <link>https://yangzhanghavefun.github.io/yzzhan/post/clustercomputing/</link>
      <pubDate>Wed, 17 Apr 2019 01:37:56 +0800</pubDate>
      
      <guid>https://yangzhanghavefun.github.io/yzzhan/post/clustercomputing/</guid>
      <description>Information Session Cloud Characteristics:
 On-demand self-service: A consumer can provision computing capabilities as needed without requiring human interaction with each service provider. Networked access: Capabilities are available over the network and accessed through standard mechanisms that promote use by hetergeneous client platforms. Resource pooling: The provider&amp;rsquo;s computing resources are pooled to serve multiple consumers using a multi-tenant model potentially with different physical and virtual resources that can be dynamically assigned and reassigned according to consumer demand.</description>
    </item>
    
    <item>
      <title>对操作系统中并发的读书总结</title>
      <link>https://yangzhanghavefun.github.io/yzzhan/post/concurrencyinoperatingsystem/</link>
      <pubDate>Wed, 17 Apr 2019 01:37:56 +0800</pubDate>
      
      <guid>https://yangzhanghavefun.github.io/yzzhan/post/concurrencyinoperatingsystem/</guid>
      <description> 这篇文章是对&amp;lt;&amp;gt;关于进程,线程等并发相关的知识点的总结. 以下内容分为四个部分, 进程的描述和控制, 线程, 并发性, 并发中的死锁和饥饿.
进程的描述和控制 线程 并发性 并发中的死锁和饥饿 </description>
    </item>
    
    <item>
      <title>Java知识点杂记</title>
      <link>https://yangzhanghavefun.github.io/yzzhan/post/javarandomnote/</link>
      <pubDate>Mon, 15 Apr 2019 01:37:56 +0800</pubDate>
      
      <guid>https://yangzhanghavefun.github.io/yzzhan/post/javarandomnote/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Data Structures and Algorithm in Java</title>
      <link>https://yangzhanghavefun.github.io/yzzhan/post/javadatastructureandalgorithm/</link>
      <pubDate>Fri, 12 Apr 2019 01:37:56 +0800</pubDate>
      
      <guid>https://yangzhanghavefun.github.io/yzzhan/post/javadatastructureandalgorithm/</guid>
      <description>Data Structure and Algorithm Iterators Suppose we want to traverse a list, performing some operations on certain links.
As users of a list, what we need is access to reference that can point to any arbitray link. This allows us to examine or modify the link. We should be able to increment the reference so we can traverse along the list, looking at each link in turn, and we should be able to access the link pointed to by the reference.</description>
    </item>
    
    <item>
      <title>对学习过的Web Security的总结</title>
      <link>https://yangzhanghavefun.github.io/yzzhan/post/websecurity/</link>
      <pubDate>Thu, 11 Apr 2019 01:37:56 +0800</pubDate>
      
      <guid>https://yangzhanghavefun.github.io/yzzhan/post/websecurity/</guid>
      <description> 横向越权和纵向越权  横向越权: 攻击者尝试访问与他拥有相同权限的用户的资源.
纵向越权: 低级别攻击者尝试访问高级别用户的资源.
 </description>
    </item>
    
    <item>
      <title>对用过的Linux(Centos7.0&#43;)指令的总结</title>
      <link>https://yangzhanghavefun.github.io/yzzhan/post/linuxreview/</link>
      <pubDate>Thu, 11 Apr 2019 01:37:56 +0800</pubDate>
      
      <guid>https://yangzhanghavefun.github.io/yzzhan/post/linuxreview/</guid>
      <description>开启防火墙对指定Port外界访问的权限 例如开启数据库port3306的port
!/bin/bash /sbin/iptables -I INPUT -p tcp --dport 3306 -j ACCEPT service iptables save service iptables restart 如果iptables save不能用则使用以下命令
# It is possible to go back to a more classic iptables setup. First, stop and mask the firewalld service: systemctl stop firewalld systemctl mask firewalld # Then, install the iptables-services package: yum install iptables-services # Enable the service at boot-time: systemctl enable iptables # Managing the service systemctl [stop|start|restart] iptables # Saving your firewall rules can be done as follows: service iptables save # check your listenning ports with: netstat -nat |grep :3306 重装mariadb 重装database server的时候, 任何残留的mysql文件都会导致新安装的mariadb.</description>
    </item>
    
    <item>
      <title>FSP and LTSA</title>
      <link>https://yangzhanghavefun.github.io/yzzhan/post/fsp/</link>
      <pubDate>Tue, 02 Apr 2019 01:37:56 +0800</pubDate>
      
      <guid>https://yangzhanghavefun.github.io/yzzhan/post/fsp/</guid>
      <description>Introduction to FSP When dealing with large code bases, identifying, locating, and removing concurrency problems can be a nightmare. The size of the system and the number of possible interleavings and synchronisations become so large that it is difficult to even understand a single problem, isolate it, figure out how to fix it, or prevent it in the first place.
s. In particular, we will look at a language called Finite State Processes (FSP), based on the well-known Communicating Sequential Processes (CSP) and Calculus of Communicating Systems (CCS).</description>
    </item>
    
    <item>
      <title>Java拾遗</title>
      <link>https://yangzhanghavefun.github.io/yzzhan/post/javashiyi/</link>
      <pubDate>Tue, 02 Apr 2019 01:37:56 +0800</pubDate>
      
      <guid>https://yangzhanghavefun.github.io/yzzhan/post/javashiyi/</guid>
      <description>面向对象和面向过程的区别与面向对象的三大基本特征和五大基本原则 面向过程指把task分解成一个一个的步骤, 每个步骤用函数来实现,依次调用即可.
进一步解释:在软件开发初期,程序编写都是以算法为核心,程序员会把数据和过程分别作为独立的部分来考虑, 数据代表空间中的客体,程序代码则用于处理这些数据,这种直接站在计算机的角度去抽象问题和解决问题的思想称为面向过程的编程思想.
面向对象指把task分解成一个一个的步骤之后, 并对各个步骤进行相应的抽象, 形成对象, 同时建立对象之间的联系. 随后组合解决问题. 在面向对象编程的过程中,要把步骤进行相应的抽象形成对象, 对象封装了相应的属性和方法. 最后基于对象和对象的能力来完成业务逻辑的实现.
进一步解释:面向对象的编程思想是站在现实角度去抽象和解决问题,它把数据和行为都看做是对象的一部分, 这样可以让程序员能以符合现实世界的思维方式来编写和组织程序.
面向对象的三个基本特征 - 封装 - 继承 - 多态 &amp;gt;封装(Encapsulation):是指利用抽象数据类型将数据和基于数据的操作封装在一起，使其构成一个不可分割的独立实体，数据被保护在抽象数据类型的内部，尽可能地隐藏内部的细节，只保留一些对外接口使之与外部发生联系。系统的其他对象只能通过包裹在数据外面的已经授权的操作来与这个封装的对象进行交流和交互。也就是说用户是无需知道对象内部的细节，但可以通过该对象对外的提供的接口来访问该对象。
 继承(Inheritance): 继承是使用已存在的类的定义作为基础建立新类的技术，新类的定义可以增加新的数据或新的功能，也可以用父类的功能，但不能选择性地继承父类。通过使用继承我们能够非常方便地复用以前的代码，能够大大的提高开发的效率。 继承所描述的是“is-a”的关系，如果有两个对象A和B，若可以描述为“A是B”，则可以表示A继承B，其中B是被继承者称之为父类或者超类，A是继承者称之为子类或者派生类。
 《Think in java》：问一问自己是否需要从子类向父类进行向上转型。如果必须向上转型，则继承是必要的，但是如果不需要，则应当好好考虑自己是否需要继承。
 多态(Polymorphism): 所谓多态就是指程序中定义的引用变量所指向的具体类型和通过该引用变量发出的方法调用在编程时并不确定，而是在程序运行期间才确定，即一个引用变量倒底会指向哪个类的实例对象，该引用变量发出的方法调用到底是哪个类中实现的方法，必须在由程序运行期间才能决定。因为在程序运行时才确定具体的类，这样，不用修改源程序代码，就可以让引用变量绑定到各种不同的类实现上，从而导致该引用调用的具体方法随之改变，即不修改程序代码就可以改变程序运行时所绑定的具体代码，让程序可以选择多个运行状态，这就是多态性。
 对于面向对象而言，多态分为编译时多态和运行时多态。其中编辑时多态是静态的，主要是指方法的重载，它是根据参数列表的不同来区分不同的函数，通过编辑之后会变成两个不同的函数，在运行时谈不上多态。而运行时多态是动态的，它是通过动态绑定来实现的，也就是我们所说的多态性。
总结:OOP是一种编程思想,一种程序范式,提倡用类来实现对象,用继承来实现关系,用封装来实现类所提供的功能,用多态来实现角色的动态转换
原文：https://blog.csdn.net/jianyuerensheng/article/details/51602015
面向对象的五个基本原则 &amp;gt;单一职责原则(Single-Resposibility Principle): 其核心思想为：一个类，最好只做一件事，只有一个引起它的变化。单一职责原则可以看做是低耦合、高内聚在面向对象原则上的引申，将职责定义为引起变化的原因，以提高内聚性来减少引起变化的原因。职责过多，可能引起它变化的原因就越多，这将导致职责依赖，相互之间就产生影响，从而大大损伤其内聚性和耦合度。通常意义下的单一职责，就是指只有一种单一功能，不要为类实现过多的功能点，以保证实体只有一个引起它变化的原因。 专注，是一个人优良的品质；同样的，单一也是一个类的优良设计。交杂不清的职责将使得代码看起来特别别扭牵一发而动全身，有失美感和必然导致丑陋的系统错误风险。
 开放封闭原则(Open-Closed principle): 其核心思想是：软件实体应该是可扩展的，而不可修改的。也就是，对扩展开放，对修改封闭的。开放封闭原则主要体现在两个方面1、对扩展开放，意味着有新的需求或变化时，可以对现有代码进行扩展，以适应新的情况。2、对修改封闭，意味着类一旦设计完成，就可以独立完成其工作，而不要对其进行任何尝试的修改。 实现开开放封闭原则的核心思想就是对抽象编程，而不对具体编程，因为抽象相对稳定。让类依赖于固定的抽象，所以修改就是封闭的；而通过面向对象的继承和多态机制，又可以实现对抽象类的继承，通过覆写其方法来改变固有行为，实现新的拓展方法，所以就是开放的。 “需求总是变化”没有不变的软件，所以就需要用封闭开放原则来封闭变化满足需求，同时还能保持软件内部的封装体系稳定，不被需求的变化影响。
Liskov替换原则(Liskov-Substituion Principle): 其核心思想是：子类必须能够替换其基类。这一思想体现为对继承机制的约束规范，只有子类能够替换基类时，才能保证系统在运行期内识别子类，这是保证继承复用的基础。在父类和子类的具体行为中，必须严格把握继承层次中的关系和特征，将基类替换为子类，程序的行为不会发生任何变化。同时，这一约束反过来则是不成立的，子类可以替换基类，但是基类不一定能替换子类。 Liskov替换原则，主要着眼于对抽象和多态建立在继承的基础上，因此只有遵循了Liskov替换原则，才能保证继承复用是可靠地。实现的方法是面向接口编程：将公共部分抽象为基类接口或抽象类，通过Extract Abstract Class，在子类中通过覆写父类的方法实现新的方式支持同样的职责。 Liskov替换原则是关于继承机制的设计原则，违反了Liskov替换原则就必然导致违反开放封闭原则。 Liskov替换原则能够保证系统具有良好的拓展性，同时实现基于多态的抽象机制，能够减少代码冗余，避免运行期的类型判别。
依赖倒置原则(Dependecy-Inversion Principle): 其核心思想是：依赖于抽象。具体而言就是高层模块不依赖于底层模块，二者都同依赖于抽象；抽象不依赖于具体，具体依赖于抽象。 我们知道，依赖一定会存在于类与类、模块与模块之间。当两个模块之间存在紧密的耦合关系时，最好的方法就是分离接口和实现：在依赖之间定义一个抽象的接口使得高层模块调用接口，而底层模块实现接口的定义，以此来有效控制耦合关系，达到依赖于抽象的设计目标。 抽象的稳定性决定了系统的稳定性，因为抽象是不变的，依赖于抽象是面向对象设计的精髓，也是依赖倒置原则的核心。 依赖于抽象是一个通用的原则，而某些时候依赖于细节则是在所难免的，必须权衡在抽象和具体之间的取舍，方法不是一层不变的。依赖于抽象，就是对接口编程，不要对实现编程。
接口隔离原则(Interface-Segregation Principle): 其核心思想是：使用多个小的专门的接口，而不要使用一个大的总接口。 具体而言，接口隔离原则体现在：接口应该是内聚的，应该避免“胖”接口。一个类对另外一个类的依赖应该建立在最小的接口上，不要强迫依赖不用的方法，这是一种接口污染。 接口有效地将细节和抽象隔离，体现了对抽象编程的一切好处，接口隔离强调接口的单一性。而胖接口存在明显的弊端，会导致实现的类型必须完全实现接口的所有方法、属性等；而某些时候，实现类型并非需要所有的接口定义，在设计上这是“浪费”，而且在实施上这会带来潜在的问题，对胖接口的修改将导致一连串的客户端程序需要修改，有时候这是一种灾难。在这种情况下，将胖接口分解为多个特点的定制化方法，使得客户端仅仅依赖于它们的实际调用的方法，从而解除了客户端不会依赖于它们不用的方法。 分离的手段主要有以下两种：1、委托分离，通过增加一个新的类型来委托客户的请求，隔离客户和接口的直接依赖，但是会增加系统的开销。2、多重继承分离，通过接口多继承来实现客户的需求，这种方式是较好的。</description>
    </item>
    
    <item>
      <title>Java面试的知识储备</title>
      <link>https://yangzhanghavefun.github.io/yzzhan/post/java-interview-preparation/</link>
      <pubDate>Sat, 16 Mar 2019 01:37:56 +0800</pubDate>
      
      <guid>https://yangzhanghavefun.github.io/yzzhan/post/java-interview-preparation/</guid>
      <description>#Content 1. Difference between Hashtable and HashMap
1.Difference between Hashtable and HashMap  ### 作者不一样。。。  Hashtable阵容
* @author Arthur van Hoff * @author Josh Bloch * @author Neal Gafter HashMap阵容
* @author Arthur van Hoff * @author Josh Bloch * @author Neal Gafter * @author Doug Lea Doug Lea大神写了util.concurrent包。 并著有并发编程圣经Concurrent Programming in Java: Design Principles and Patterns 他的个人主页 http://g.oswego.edu/ Josh Bloch 著有Effective Java, Arthur vanHoff最早任职于硅谷的SunMicrosystems公司，从事Java程序语言的早期开发工作 Neal Gafter是Java SE 4和5语言增强的主要设计者和实现者</description>
    </item>
    
    <item>
      <title>对Elastic Search的实现和理解</title>
      <link>https://yangzhanghavefun.github.io/yzzhan/post/search_engine/</link>
      <pubDate>Sat, 16 Mar 2019 01:37:56 +0800</pubDate>
      
      <guid>https://yangzhanghavefun.github.io/yzzhan/post/search_engine/</guid>
      <description> Elastic Search Engine Specification  Coding Language : python FrameWork : django + scrapy Scrapied website: www.zhihu.com www.jobbole.com www.lagou.com  Knowledge Preparation 浏览器 driver 由于知乎等网站需要登录后才能访问所需要的内容，于是我们需要安装chrome driver 和 selenium去模拟登录
下载链接 http://chromedriver.chromium.org/downloads 但是，直接使用还是凉凉， 因为服务器会从Chrome driver的某些js文件中检测出这是个driver不是正常浏览器，然后返回403.我们的解决方法是开启chrome remote debug 模式 配置 关闭所有chrome正在运行的实例 在Cmd里找到Chrome.exe所在的目录，输入chrome.exe &amp;ndash;remote-debugging-port=9222 然后访问127.0.0.1:9222/json
ElasticSearch 概念  集群： 一个或多个节点组织在一起 节点： 一个节点是集群中的一个服务器，由一个名字来标识 分片： 将索引划分为多份的能力，允许水平分割和扩展容量，多个分片响应请求，提高性能和吞吐量 副本： 创建分片的一份或多份的能力，在一个节点失败是其余节点可以顶上     ElasticSearch Mysql     index(索引) 数据库   type(类型) 表   documents(文档) 行   Fields 列    </description>
    </item>
    
    <item>
      <title>如何在python环境实现并发和一些对并发的理解</title>
      <link>https://yangzhanghavefun.github.io/yzzhan/post/coroutine/</link>
      <pubDate>Wed, 16 Jan 2019 01:37:56 +0800</pubDate>
      
      <guid>https://yangzhanghavefun.github.io/yzzhan/post/coroutine/</guid>
      <description>概念： 并发，并行，同步，异步，阻塞， 非阻塞 并发的开发 &amp;mdash; 回调 + 事件循环 + select(poll,epoll) import socket from urllib.parse import urlparse from selectors import DefaultSelector, EVENT_READ, EVENT_WRITE selector = DefaultSelector() urls = [&amp;#34;https://www.baidu.com&amp;#34;, &amp;#34;https://www.baidu.com&amp;#34;] stop = False class Fetcher: def connected(self, key): selector.unregister(key.fd) self.client.send(&amp;#34;GET {} HTTP/1.1\r\nHost:{}\r\nConnection:close\r\n\r\n&amp;#34;.format(self.path, self.host).encode(&amp;#34;utf8&amp;#34;)) # 当写入成功时，我们继续注册selector用以接受请求的回答 selector.register(self.client.fileno(), EVENT_READ, self.received) def received(self, key): d = self.client.recv(1024) if d: self.data += d else: selector.unregister(key.fd) data = self.data.decode(&amp;#34;utf8&amp;#34;) html_data = data.split(&amp;#34;\r\n\r\n&amp;#34;)[1] print(html_data) self.client.close() urls.remove(self.next_url) if not urls: global stop stop = True def get_url(self, url): self.</description>
    </item>
    
    <item>
      <title>实现高并发并深入理解asyncio内置包</title>
      <link>https://yangzhanghavefun.github.io/yzzhan/post/asyncio/</link>
      <pubDate>Wed, 16 Jan 2019 01:37:56 +0800</pubDate>
      
      <guid>https://yangzhanghavefun.github.io/yzzhan/post/asyncio/</guid>
      <description>Package Asynic 实现协程和io多路复用，python提供了一个内置包&amp;mdash;asyncio去简化 回调+事件循环(核心)+select(poll,epoll)这个流程。
在async包的内部，已经实现了事件循环，并且为了把generator和coroutine方法区分开，python引入了两个关键词 async和await
-async用于方法开头，声明此方法为协程方法
-await用于方法中，声明需要异步处理的地方，类似于生成器里的yield from
-同时方法末尾可提供一个返回值。
-在协程方法中不可以使用同步/阻塞的方法或函数(eg: time.sleep() &amp;mdash;&amp;gt; async.sleep())，否则会使异步编程无意义
Adding tasks into loop  我们实例化loop &amp;mdash;&amp;gt; loop = asyncio.get_event_loop()
 然后列出需要异步实现的Tasks. 此时我们有两种实现方法。第一我们可以把我们的task转成Future object eg: ``python futures = [asyncio.ensure_future(get_html(&amp;quot;www.baidu.com/{}&amp;quot;.format(i))) for i in range(100)]
  for future in futures: future.add_done_callback(callbakck)
 这个方法与线程池的实现方法和原理相同，在future object里存着返回的值，并用result()可以调出。并且，future object支持增加回调函数.当我们的回调函数需要输入参数时，我们需要用到包装函数partial ---- from functools import partial ```python for future in futures: future.add_done_callback(partial(callbakck, &amp;quot;www.baidu.com&amp;quot;))  或者用async.wait, async.gather包装
task_group_1 = [get_html(&amp;#34;www.bilibili.com/{}&amp;#34;.format(i))for i in range(10)] task_group_2 = [get_html(&amp;#34;www.</description>
    </item>
    
    <item>
      <title>对多线程的理解和深入理解Future源码</title>
      <link>https://yangzhanghavefun.github.io/yzzhan/post/multithreads/</link>
      <pubDate>Wed, 16 Jan 2019 01:37:56 +0800</pubDate>
      
      <guid>https://yangzhanghavefun.github.io/yzzhan/post/multithreads/</guid>
      <description>Basic Concepts related to thread and process Multiple ways to implement the multithreading project in python Queue, Lock, RLock, Condition and Semorpher # GIL---global interpreter lock import threading from queue import Queue import time # Communication between threads # 1. Share Variables sum = 0 lock = threading.Lock() def add_glo(lock): global sum for i in range(1000000): lock.acquire() sum += 1 lock.release() def dec_glo(lock): global sum for i in range(1000000): lock.</description>
    </item>
    
    <item>
      <title>Detailed algorithm For Hash Function</title>
      <link>https://yangzhanghavefun.github.io/yzzhan/post/hash_function/</link>
      <pubDate>Sat, 12 Jan 2019 01:37:56 +0800</pubDate>
      
      <guid>https://yangzhanghavefun.github.io/yzzhan/post/hash_function/</guid>
      <description>Hash Function There will be three topics related to HASH FUNCTION in this article. Generally, Hash Function could be divided into two part, Block cipher construct and dedicated hash function. Our focus is on dedicated function, which contains three aspects.
 MD4 Family  MD5 SHA-1 SHA-3  SHA-3 Others  Properties of Hash Function SHA-1 Overview The general idea for SHA-1 is to transfer the message with any length into 160 bits.</description>
    </item>
    
    <item>
      <title>Creating a New Theme</title>
      <link>https://yangzhanghavefun.github.io/yzzhan/post/creating-a-new-theme/</link>
      <pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://yangzhanghavefun.github.io/yzzhan/post/creating-a-new-theme/</guid>
      <description>Introduction This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.
We&amp;rsquo;ll start with creating a new site with a very basic template.</description>
    </item>
    
    <item>
      <title>(Hu)go Template Primer</title>
      <link>https://yangzhanghavefun.github.io/yzzhan/post/goisforlovers/</link>
      <pubDate>Mon, 28 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>https://yangzhanghavefun.github.io/yzzhan/post/goisforlovers/</guid>
      <description>Hugo uses the excellent go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in go templates.
This document is a brief primer on using go templates.</description>
    </item>
    
    <item>
      <title>Hugo 主题 Nuo 文章样式预览</title>
      <link>https://yangzhanghavefun.github.io/yzzhan/post/hugo-nuo-post-preview/</link>
      <pubDate>Thu, 17 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>https://yangzhanghavefun.github.io/yzzhan/post/hugo-nuo-post-preview/</guid>
      <description>&lt;p&gt;这篇文章集中说明本人博客主题所支持的 Markdown 语法和 Hugo Shortcodes 插件，你也可以在这里预览到他们的样子。如果你不喜欢某些部分的样式，可以去修改 &lt;code&gt;content.scss&lt;/code&gt; 和 &lt;code&gt;shortcodes.scss&lt;/code&gt; 这两个文件。预告一下，我所用的这个名为 &lt;code&gt;Nuo&lt;/code&gt; 的 &lt;code&gt;Hugo&lt;/code&gt; 也将于近期发布，敬请期待。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Getting Started with Hugo</title>
      <link>https://yangzhanghavefun.github.io/yzzhan/post/hugoisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://yangzhanghavefun.github.io/yzzhan/post/hugoisforlovers/</guid>
      <description>Step 1. Install Hugo Goto hugo releases and download the appropriate version for your os and architecture.
Save it somewhere specific as we will be using it in the next step.
More complete instructions are available at installing hugo
Step 2. Build the Docs Hugo has its own example site which happens to also be the documentation site you are reading right now.
Follow the following steps:
 Clone the hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313  Corresponding pseudo commands:</description>
    </item>
    
    <item>
      <title>Migrate to Hugo from Jekyll</title>
      <link>https://yangzhanghavefun.github.io/yzzhan/post/migrate-from-jekyll/</link>
      <pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://yangzhanghavefun.github.io/yzzhan/post/migrate-from-jekyll/</guid>
      <description>Move static content to static Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like
▾ &amp;lt;root&amp;gt;/ ▾ images/ logo.png  should become
▾ &amp;lt;root&amp;gt;/ ▾ static/ ▾ images/ logo.png  Additionally, you&amp;rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://yangzhanghavefun.github.io/yzzhan/post/iteratorandgenerator/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yangzhanghavefun.github.io/yzzhan/post/iteratorandgenerator/</guid>
      <description></description>
    </item>
    
    <item>
      <title>COMP-90054 AI Planning</title>
      <link>https://yangzhanghavefun.github.io/yzzhan/post/ai/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yangzhanghavefun.github.io/yzzhan/post/ai/</guid>
      <description>Markov Decision Processes  Classical Planning tools can produce solutions quickly in large search space; but assume:
 Deterministic events Environments change only as result of an action Perfect knowledge (omniscience) Single actor (omniscience)   Markov Decision Processes(MDPs) remove the assumption of deterministic events and instead assume that each action could have multiple outcomes, with each outcome associated with a probability.
MDPs have been successfully applied to planning in many domains: robot navigation, planning which areas of a mine to dig for minerals, treatment for patients, maintainance scheduling on vehicles, and many others.</description>
    </item>
    
    <item>
      <title>HashMap 源码解析</title>
      <link>https://yangzhanghavefun.github.io/yzzhan/post/hashmap_sa/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yangzhanghavefun.github.io/yzzhan/post/hashmap_sa/</guid>
      <description>Construction An instance of has two parameters that affect its performance: initial capacity and load factor.
 capacity is the number of buckets in the hash table, and the initial capacity is simply the capacity at the time the hash table is created. load factor is a measure of how full the hash table is allowed to get before its capacity is automatically increased.  When the number of entries in the hash table exceeds the product of the load factor and the current capacity, the hash table is rehashed (that is, internal data structures are rebuilt) so that the hash table has approximately twice the number of buckets.</description>
    </item>
    
    <item>
      <title>Java Netty框架源码分析</title>
      <link>https://yangzhanghavefun.github.io/yzzhan/post/netty/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yangzhanghavefun.github.io/yzzhan/post/netty/</guid>
      <description>两个问题  服务端的socket在哪里启动  反射创建服务端channel. New Socket() 通过jdk创建底层jdk channel. 创建NioServerSocketConfig()用来配置TCP参数 AbstractNioChannel() configure(false)配置channel为非阻塞 AbstractChannel() 创建id(唯一标识符), unsafe(底层方法), pipeline(逻辑链).  在哪里accept连接  netty服务端的启动  创建服务端Channel  bind(): 用户代码接口 initAndRegister(): 初始化并注册 newChannel(): 创建服务端Channel  初始化服务端Channel 注册selector 端口绑定  创建服务端Channel  反射创建服务端channel. New Socket() 通过jdk创建底层jdk channel. 创建NioServerSocketConfig()用来配置TCP参数 AbstractNioChannel()  configure(false)配置channel为非阻塞 AbstractChannel() 创建id(唯一标识符), unsafe(底层方法), pipeline(逻辑链).   初始化服务端Channel  init() 初始化的入口  set ChannelOptions, ChannelAttrs set ChildOptions, ChildAtrrs config handler 配置服务端pipeline add ServerBootstrapAcceptor 用于接收到accept()的请求时分配一个nio的服务端的线程.   总的来说, 初始化的功能就是保存用户的配置, 并用其建立一个连接器.</description>
    </item>
    
    <item>
      <title>Learning Kubernates</title>
      <link>https://yangzhanghavefun.github.io/yzzhan/post/kube/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yangzhanghavefun.github.io/yzzhan/post/kube/</guid>
      <description>就这样，一旦“程序”被执行起来，它就从磁盘上的二进制文件，变&amp;hellip;
极客时间版权所有: https://time.geekbang.org/column/article/14642</description>
    </item>
    
    <item>
      <title>Modelling Complex System(SWEN90005)</title>
      <link>https://yangzhanghavefun.github.io/yzzhan/post/swen90005/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yangzhanghavefun.github.io/yzzhan/post/swen90005/</guid>
      <description>Concurrency Concurrent programming needs to handle two types of difficulties.
 Communication: Process generally need to communicate with each other, either by accessing shared data, or by message passing. Synchronization: Process may need to synchronize certain events, such as &amp;ldquo;P must not reach point P until after Q has reached point Q&amp;rdquo;.  Here are two solutions to solve the difficulites.
 Shared memory: utilising the concept of monitor. Message Passing: based on Hoare&amp;rsquo;s idea of Communication Sequential Processes(CSP)  Shared Memorry &amp;mdash; Java The processors go wrong because each falsely assumes to have exclusive access to memorry in its read-change-write cycle.</description>
    </item>
    
    <item>
      <title>SWEN-30006 Software Modelling and Design</title>
      <link>https://yangzhanghavefun.github.io/yzzhan/post/swen30006/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yangzhanghavefun.github.io/yzzhan/post/swen30006/</guid>
      <description></description>
    </item>
    
    <item>
      <title>数据库重点知识归纳</title>
      <link>https://yangzhanghavefun.github.io/yzzhan/post/database/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yangzhanghavefun.github.io/yzzhan/post/database/</guid>
      <description>Database Index 常见问题:
 为什么要使用索引 什么样的信息能成为索引 索引的数据结构 密集索引和稀疏索引  索引的数据结构  生成索引,建立二叉查找树进行二分查找 生成索引,建立B-Tree结构进行查找  B-Tree定义 根节点至少包括两个孩子 树中每个节点最多含有m个孩子(m&amp;gt;=2) 除根节点和叶节点外,其他每个节点至少有ceil(m/2)个孩子 所有叶子节点都位于同一层 假设每个非终端节点中包含有n个关键字信息, 其中  Ki(i=1&amp;hellip;n)为关键字, 且关键字按顺序升序排序Ki-1&amp;lt;Ki 关键字的个数n必须满足: [ceil(m/2)-1]&amp;lt;=n&amp;lt;=m-1 非叶子结点的指针: P[1], P[2], &amp;hellip;, P[M]指向关键字大于K[M-1]的子树,其他P[i]指向关键字属于(K[i-1], K[i])的子树   生成索引,建立B+-Tree结构进行查找  定义 非叶子节点的子树指针与关键字个数相同 非叶子节点的子树指针P[i],指向关键字值(K[i],K[i+1])的子树 非叶子节点仅用来索引,数据都保存在叶子节点中 所有叶子节点均有一个链指针指向下一个叶子节点 优点 B+树的磁盘读写代价更低 B+树的查询效率更加稳定 B+树更有利于对数据库的扫描  Hash索引  缺点 仅仅能满足&amp;rdquo;=&amp;ldquo;, &amp;ldquo;IN&amp;rdquo;, 不能使用范围查询 无法被用来避免数据的排序操作 不能利用部分索引键查询 不能避免表扫描 遇到大量Hash值相等的情况后性能并不一定就会比B-Tree索引高   密集索引和稀疏索引  密集索引: 文件中的每个搜索码值都对应一个索引值,就是叶子节点保存了整行, innodb只有一个 稀疏索引: 文件只为索引码的某些值建立索引项, 比如 innodb的其他索引只存了键位信息和主键, myisam的所有索引都是  以MySQL为例</description>
    </item>
    
    <item>
      <title>设计原则与设计模式归纳</title>
      <link>https://yangzhanghavefun.github.io/yzzhan/post/designpattern/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yangzhanghavefun.github.io/yzzhan/post/designpattern/</guid>
      <description>开闭原则 一个软件实体如类, 模块和函数都应该对扩展开放,对修改关闭. - 用抽象构建框架, 用实现扩展细节 - 优点: 提高软件系统的可复用性及可维护性
依赖倒置原则 高层模块不应该依赖低层模块, 两者都应该依赖其抽象 - 抽象不应该依赖细节; 细节应该依赖抽象 - 针对接口编程,不要针对实现编程 - 优点: 可以减少类间的耦合性, 提高系统稳定性, 提高代码可读性和可维护性, 可降低修改程序所造成的风险
单一职责原则 不要存在多于一个导致类变更的原因 - 一个类/接口/方法只负责一项职责 - 优点: 降低类的复杂度, 提高类的可读性, 提高系统的可维护性, 降低变更引起的风险.
接口隔离原则 用多个专门的接口, 而不使用单一的总接口, 客户端不应该依赖它不需要的接口 - 优点: 符合我们常说的高内聚低耦合的设计思想. 从而使得类具有很好的可读性, 可扩展性和可维护性
迪米特原则 一个对象应该对其他对象保持最少的了解. 又叫最少知道原则 - 尽量降低类与类之间的耦合
创建型 简单工厂模式 工厂模式 定义一个创建对象的接口但让实现这个接口的类来决定实例化哪个类, 工厂方法让类的实例化推迟到子类中进行
 适用场景:  创建对象需要大量重复的代码 客户端(应用层)不依赖于产品类实例如何被创建,实现等细节 一个类通过子类来制定创建对象  优点:  用户只需要关心所需要产品对应的工厂,无须关心创建细节 加入新产品符合开闭原则,提高可扩展性  缺点:  类的个数容易过多, 增加复杂度 增加了系统的抽象性和理解难度   ###抽象工厂 客户端(应用层)不依赖于产品类实例如何被创建,实现等细节</description>
    </item>
    
    <item>
      <title>面试问题归纳</title>
      <link>https://yangzhanghavefun.github.io/yzzhan/post/interview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yangzhanghavefun.github.io/yzzhan/post/interview/</guid>
      <description>UserId为什么不用自增键及主键策略 主键不应修改 对于数据库来说，主键其实是可以修改的，只要不和其他主键冲突就可以。但是，对于应用来说，如果一条记录要修改主键，那就会出大问题。
因为主键的第二个作用是让其他表的外键引用自己，从而实现关系结构。一旦某个表的主键发生了变化，就会导致所有引用了该表的数据必须全部修改外键。很多Web应用的数据库并不是强约束（仅仅引用主键但并没有设置外键约束），修改主键会导致数据完整性直接被破坏。
业务字段不可用于主键 所有涉及到业务的字段，无论它看上去是否唯一，都决不能用作主键。例如，用户表的Email字段是唯一的，但是，如果用它作主键，就会导致其他表到处引用Email字段，从而泄露用户信息。
此外，修改Email实际上是一个业务操作，这个操作就直接违反了上一条原则。
那么，主键应该使用哪个字段呢？
主键必须使用单独的，完全没有业务含义的字段，也就是主键本身除了唯一标识和不可修改这两个责任外，主键没有任何业务含义。
类似的，看上去唯一的用户名、身份证号等，也不能用作主键。对这些唯一字段，应该加上unique索引约束。
主键应该用什么类型 主键应该使用整数还是字符串？（用浮点数的请自觉充值智商）
我强烈建议使用字符串。
为什么？
我们先看使用整数的问题。
使用整数有两个选择：数据库自增和自己生成。
自己生成其实也是自增，无非就是把上次使用的值保存到某个地方，下次使用的时候继续自增。常见的做法是用一个单独的表存储上次用的最大值。这种方式实现复杂，可靠性低，还不如数据库自增。
数据库自增最大的问题还不在于数据库单点造成无法水平切分，因为绝大部分公司还撑不到业务需要分库的情况就倒闭了。
自增主键最大的问题是把公司业务的关键运营数据完全暴露给了竞争对手和VC。举个例子，用户表采用自增主键，只需要每周一早上去注册一个用户，把上周注册的ID和本周注册的ID一比，立刻就知道了该公司一周的新增用户数量。如果网站声称新增了10万用户，但ID却只增加了1千，就只能呵呵了。
因为主键的本质是保证唯一记录，并不要求主键是连续的。实际上不连续的更好，这样既避免了运营数据泄露，也给黑客预测ID制造了障碍，具有更高的安全性。
用字符串主键就不存在这个问题。如果我们用一个UUID作为主键，即varchar(32)，除了占用的存储空间较多外，字符串主键具有不可预测性。
有人觉得UUID完全随机，主键本身没有按时间递增，不利于直接主键排序。其实解决这个问题很简单。
方法一，直接用时间戳+UUID构造一个主键，时间戳注意补0，这样生成的主键就是按时间排序的。这个方法简单粗暴，缺点是主键更长了。
方法二，自定义一个算法，时间戳放高位，序列号放低位，还可以保留机器位，然后用base32编码，可以把长度控制在20个字符内。
有人会问，根据方法二，构造包含时间戳和序列号的64位整数作为主键是否可行？
理论上来说是可行的，因为时间戳0xffffffff可以表示到2100年。但是剩下的位不是ffffffff而是只有fffff，如果给机器分配ff作为标识，那么每秒只能最多生成0xfff+1=4096个主键，对一些大型应用不太够用。
为啥64位整数除掉时间戳只能用后面的fffff位呢？这是因为JavaScript的Number类型是56位精度，它能表示的最大整数是0x1fffffffffffff，而我们迟早会用REST跟JavaScript打交道，所以要把64位整数的范围限制在0x1fffffffffffff内，否则与JavaScript交互就会出错。
虽然理论上64位整数做时间戳+序列号的主键是没问题的，但是实践中是没法绕开与JavaScript交互的，综合考虑，字符串主键最可靠。
ref from: https://www.liaoxuefeng.com/article/1100985514586848</description>
    </item>
    
  </channel>
</rss>